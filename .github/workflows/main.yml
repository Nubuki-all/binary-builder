name: ci

on:
  push:
    branches:
      - 'wget'

#on: [push, pull_request]

jobs:
  build_job_a:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Build on ubuntu20.04 (aarch64)
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v3
        name: Build artifact
        id: build
        with:
          #arch: aarch64
          #distro: ubuntu20.04
          arch: none
          distro: none
          base_image: --platform=linux/arm64/v8 ubuntu:20.04

          # Not required, but speeds up builds
          #githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: wget

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install gcc g++ git make clang wget libgnutls28-dev libcurl4-openssl-dev uuid-dev zlib1g-dev libpulse-dev -y

          # Produce a binary artifact and place it in the mounted volume
          run: |
            git clone https://github.com/openssl/openssl.git && cd openssl
            ./Configure no-shared
            make
            make install
            cd ..
            wget https://ftp.gnu.org/gnu/wget/wget-1.25.0.tar.gz
            tar xvzf wget-1.25.0.tar.gz
            cd wget-1.25.0
            export ROOTDIR="${PWD}"
            export LIBS="-static -lc -lssl -lcrypto -lz -ldl"
            ./configure \
              	--prefix=${ROOTDIR}/build \
              	--with-ssl=openssl --with-zlib \
              	--without-included-regex \
              	--enable-nls \
              	--enable-dependency-tracking \
              	--with-metalink \
              	--sysconfdir=${ROOTDIR}/build/etc \
              	--localedir=${ROOTDIR}/build/usr/share/locale \
              	--mandir=${ROOTDIR}/build/usr/share/man \
              	--infodir=${ROOTDIR}/build/usr/share/info \
              	--bindir=${ROOTDIR}/build/usr/bin
            make
            make install
            cp -r ${ROOTDIR}/build/usr/bin/wget /artifacts/wget-arm64

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host..
        run: |
          ls -al "${PWD}/artifacts"
      - uses: actions/upload-artifact@v4
        with:
          name: build_a
          path: artifacts
  build_job_b:
    runs-on: ubuntu-20.04
    name: Build on ubuntu20.04 (x86_64)
    steps:
    - uses: actions/checkout@v4
    - name: install dev package & deps
      run: |
        sudo apt-get update -q -y
        sudo apt-get install gcc g++ git clang wget libgnutls28-dev libcurl4-openssl-dev uuid-dev zlib1g-dev libpulse-dev -y
    - name: build
      run: |
        mkdir artifacts
        git clone https://github.com/openssl/openssl.git && cd openssl
        ./Configure no-shared
        sudo make
        sudo make install
        cd ..
        wget https://ftp.gnu.org/gnu/wget/wget-1.25.0.tar.gz
        tar xvzf wget-1.25.0.tar.gz
        cd wget-1.25.0
        export ROOTDIR="${PWD}"
        export LIBS="-static -lc -lssl -lcrypto -lz -ldl"
        ./configure \
              	--prefix=${ROOTDIR}/build \
              	--with-ssl=openssl --with-zlib \
              	--without-included-regex \
              	--enable-nls \
              	--enable-dependency-tracking \
              	--with-metalink \
              	--sysconfdir=${ROOTDIR}/build/etc \
              	--localedir=${ROOTDIR}/build/usr/share/locale \
              	--mandir=${ROOTDIR}/build/usr/share/man \
              	--infodir=${ROOTDIR}/build/usr/share/info \
              	--bindir=${ROOTDIR}/build/usr/bin
        make
        make install
        cp -r ${ROOTDIR}/build/usr/bin/wget ../artifacts/wget-x86_64
        ls ../artifacts
        

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with: 
        name: build_b
        path: artifacts
  
  release:
    runs-on: ubuntu-latest
    needs: [build_job_a, build_job_b]
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        merge-multiple: false
        path: binaries
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Upload binaries to releases 
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        files: |
          binaries/*
        generate_release_notes: true
        tag_name: ${{ steps.date.outputs.date }}
